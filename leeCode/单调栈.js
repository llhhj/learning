// 给定一个长度为 m（m >= 1）的字符串，这个字符串表示一个非负整数 N（应该可以用 long 装下，我是最后超时了）。其中 N 没有前导 0。

// 再给定一个整数 x（x <= m），要你从整数 N 中删除 x 个数字，使得余下的数字最小。最后输出这个最小的数字。

// 例如：
// 输入：N=2020，x = 1
// 输出：20
// 解释：删除第一个 2，剩下 020=20

// 输入：N=1432319，x = 3
// 输出：1219

// for (遍历这个数组)
// {
// 	if (栈空 || 栈顶元素大于等于当前比较元素)
// 	{
// 		入栈;
// 	}
// 	else
// 	{
// 		while (栈不为空 && 栈顶元素小于当前元素)
// 		{
// 			栈顶元素出栈;
// 			更新结果;
// 		}
// 		当前数据入栈;
// 	}
// }

function smallNum(N,x){
    var N = N.split('')
    for(let i = 0; i < N.length; i++){
        
        if (x == 0) {
            return N
        } 

        if (N[i] > N[i+1]) {
            let d = N.splice(i,1)
            console.log(x);

            x--;
            i--;
        }
    }
}
// smallNum('1432319',3)
console.log(smallNum('14327519',3))